{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Text, Button } from \"../../elements\";\nimport { CodeField, Cursor, useBlurOnFulfill, useClearByFocusCell } from 'react-native-confirmation-code-field';\nimport useThemeColors from \"../../../custom-hooks/useThemeColors\";\nimport styles from \"./styles\";\nimport { useNavigation, StackActions } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar CELL_COUNT = 5;\nvar AuthVerificationCode = function AuthVerificationCode() {\n  var navigation = useNavigation();\n  var _useThemeColors = useThemeColors(),\n    primary = _useThemeColors.primary,\n    border = _useThemeColors.border;\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    value = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var ref = useBlurOnFulfill({\n    value: value,\n    cellCount: CELL_COUNT\n  });\n  var _useClearByFocusCell = useClearByFocusCell({\n      value: value,\n      setValue: setValue\n    }),\n    _useClearByFocusCell2 = _slicedToArray(_useClearByFocusCell, 2),\n    props = _useClearByFocusCell2[0],\n    getCellOnLayoutHandler = _useClearByFocusCell2[1];\n  var _onNextButtonPressed = function _onNextButtonPressed() {\n    if (value.length !== 5) {\n      Alert.alert('Error', 'Verification code is not valid!');\n      return;\n    }\n    navigation.dispatch(StackActions.replace('LoginScreen'));\n  };\n  return _jsx(SafeAreaView, {\n    style: styles.root,\n    children: _jsxs(ScrollView, {\n      contentContainerStyle: styles.contentContainer,\n      children: [_jsxs(View, {\n        style: styles.formContainer,\n        children: [_jsx(Text, {\n          isBold: true,\n          isHeadingTitle: true,\n          children: \"Verification Code\"\n        }), _jsx(Text, {\n          isSecondary: true,\n          hasMargin: true,\n          children: \"A verification code has been sent to your mobile phone\"\n        }), _jsx(View, {\n          style: styles.verificationCodeContainer,\n          children: _jsx(CodeField, _objectSpread(_objectSpread({\n            ref: ref\n          }, props), {}, {\n            value: value,\n            onChangeText: setValue,\n            cellCount: CELL_COUNT,\n            rootStyle: styles.codeFieldRoot,\n            keyboardType: \"number-pad\",\n            textContentType: \"oneTimeCode\",\n            renderCell: function renderCell(_ref) {\n              var index = _ref.index,\n                symbol = _ref.symbol,\n                isFocused = _ref.isFocused;\n              return _jsx(Text, {\n                style: [styles.cell, {\n                  borderColor: isFocused ? primary : border\n                }],\n                onLayout: getCellOnLayoutHandler(index),\n                children: symbol || (isFocused ? _jsx(Cursor, {}) : null)\n              }, index);\n            }\n          }))\n        })]\n      }), _jsx(Button, {\n        isFullWidth: true,\n        onPress: _onNextButtonPressed,\n        children: _jsx(Text, {\n          isBold: true,\n          children: \"Next\"\n        })\n      })]\n    })\n  });\n};\nexport default AuthVerificationCode;","map":{"version":3,"names":["React","Text","Button","CodeField","Cursor","useBlurOnFulfill","useClearByFocusCell","useThemeColors","styles","useNavigation","StackActions","CELL_COUNT","AuthVerificationCode","navigation","primary","border","useState","value","setValue","ref","cellCount","props","getCellOnLayoutHandler","_onNextButtonPressed","length","Alert","alert","dispatch","replace","root","contentContainer","formContainer","verificationCodeContainer","codeFieldRoot","index","symbol","isFocused","cell","borderColor"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/components/screens/AuthVerificationCode/AuthVerificationCode.tsx"],"sourcesContent":["import * as React from 'react';\nimport {SafeAreaView, View, ScrollView, Alert} from 'react-native';\nimport {Text, Button} from '@src/components/elements';\nimport {\n  CodeField,\n  Cursor,\n  useBlurOnFulfill,\n  useClearByFocusCell,\n} from 'react-native-confirmation-code-field';\nimport useThemeColors from '@src/custom-hooks/useThemeColors';\nimport styles from './styles';\nimport {useNavigation, StackActions} from '@react-navigation/native';\n\ntype AuthVerificationCodeProps = {};\n\nconst CELL_COUNT = 5;\n\nconst AuthVerificationCode: React.FC<AuthVerificationCodeProps> = () => {\n  const navigation = useNavigation();\n  const {primary, border} = useThemeColors();\n  const [value, setValue] = React.useState('');\n  const ref = useBlurOnFulfill({value, cellCount: CELL_COUNT});\n  const [props, getCellOnLayoutHandler] = useClearByFocusCell({\n    value,\n    setValue,\n  });\n\n  const _onNextButtonPressed = () => {\n    if (value.length !== 5) {\n      Alert.alert('Error', 'Verification code is not valid!');\n      return;\n    }\n    navigation.dispatch(StackActions.replace('LoginScreen'));\n  };\n\n  return (\n    <SafeAreaView style={styles.root}>\n      <ScrollView contentContainerStyle={styles.contentContainer}>\n        <View style={styles.formContainer}>\n          <Text isBold isHeadingTitle>\n            Verification Code\n          </Text>\n          <Text isSecondary hasMargin>\n            A verification code has been sent to your mobile phone\n          </Text>\n          <View style={styles.verificationCodeContainer}>\n            <CodeField\n              ref={ref}\n              {...props}\n              value={value}\n              onChangeText={setValue}\n              cellCount={CELL_COUNT}\n              rootStyle={styles.codeFieldRoot}\n              keyboardType=\"number-pad\"\n              textContentType=\"oneTimeCode\"\n              renderCell={({index, symbol, isFocused}) => (\n                <Text\n                  key={index}\n                  style={[\n                    styles.cell,\n                    {\n                      borderColor: isFocused ? primary : border,\n                    },\n                  ]}\n                  onLayout={getCellOnLayoutHandler(index)}>\n                  {symbol || (isFocused ? <Cursor /> : null)}\n                </Text>\n              )}\n            />\n          </View>\n        </View>\n        <Button isFullWidth onPress={_onNextButtonPressed}>\n          <Text isBold>Next</Text>\n        </Button>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nexport default AuthVerificationCode;\n"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAAA;AAE/B,SAAQC,IAAI,EAAEC,MAAM;AACpB,SACEC,SAAS,EACTC,MAAM,EACNC,gBAAgB,EAChBC,mBAAmB,QACd,sCAAsC;AAC7C,OAAOC,cAAc;AACrB,OAAOC,MAAM;AACb,SAAQC,aAAa,EAAEC,YAAY,QAAO,0BAA0B;AAAC;AAAA;AAIrE,IAAMC,UAAU,GAAG,CAAC;AAEpB,IAAMC,oBAAyD,GAAG,SAA5DA,oBAAyD,GAAS;EACtE,IAAMC,UAAU,GAAGJ,aAAa,EAAE;EAClC,sBAA0BF,cAAc,EAAE;IAAnCO,OAAO,mBAAPA,OAAO;IAAEC,MAAM,mBAANA,MAAM;EACtB,sBAA0Bf,KAAK,CAACgB,QAAQ,CAAC,EAAE,CAAC;IAAA;IAArCC,KAAK;IAAEC,QAAQ;EACtB,IAAMC,GAAG,GAAGd,gBAAgB,CAAC;IAACY,KAAK,EAALA,KAAK;IAAEG,SAAS,EAAET;EAAU,CAAC,CAAC;EAC5D,2BAAwCL,mBAAmB,CAAC;MAC1DW,KAAK,EAALA,KAAK;MACLC,QAAQ,EAARA;IACF,CAAC,CAAC;IAAA;IAHKG,KAAK;IAAEC,sBAAsB;EAKpC,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB,GAAS;IACjC,IAAIN,KAAK,CAACO,MAAM,KAAK,CAAC,EAAE;MACtBC,KAAK,CAACC,KAAK,CAAC,OAAO,EAAE,iCAAiC,CAAC;MACvD;IACF;IACAb,UAAU,CAACc,QAAQ,CAACjB,YAAY,CAACkB,OAAO,CAAC,aAAa,CAAC,CAAC;EAC1D,CAAC;EAED,OACE,KAAC,YAAY;IAAC,KAAK,EAAEpB,MAAM,CAACqB,IAAK;IAAA,UAC/B,MAAC,UAAU;MAAC,qBAAqB,EAAErB,MAAM,CAACsB,gBAAiB;MAAA,WACzD,MAAC,IAAI;QAAC,KAAK,EAAEtB,MAAM,CAACuB,aAAc;QAAA,WAChC,KAAC,IAAI;UAAC,MAAM;UAAC,cAAc;UAAA;QAAA,EAEpB,EACP,KAAC,IAAI;UAAC,WAAW;UAAC,SAAS;UAAA;QAAA,EAEpB,EACP,KAAC,IAAI;UAAC,KAAK,EAAEvB,MAAM,CAACwB,yBAA0B;UAAA,UAC5C,KAAC,SAAS;YACR,GAAG,EAAEb;UAAI,GACLE,KAAK;YACT,KAAK,EAAEJ,KAAM;YACb,YAAY,EAAEC,QAAS;YACvB,SAAS,EAAEP,UAAW;YACtB,SAAS,EAAEH,MAAM,CAACyB,aAAc;YAChC,YAAY,EAAC,YAAY;YACzB,eAAe,EAAC,aAAa;YAC7B,UAAU,EAAE;cAAA,IAAEC,KAAK,QAALA,KAAK;gBAAEC,MAAM,QAANA,MAAM;gBAAEC,SAAS,QAATA,SAAS;cAAA,OACpC,KAAC,IAAI;gBAEH,KAAK,EAAE,CACL5B,MAAM,CAAC6B,IAAI,EACX;kBACEC,WAAW,EAAEF,SAAS,GAAGtB,OAAO,GAAGC;gBACrC,CAAC,CACD;gBACF,QAAQ,EAAEO,sBAAsB,CAACY,KAAK,CAAE;gBAAA,UACvCC,MAAM,KAAKC,SAAS,GAAG,KAAC,MAAM,KAAG,GAAG,IAAI;cAAC,GARrCF,KAAK,CASL;YAAA;UACP;QACF,EACG;MAAA,EACF,EACP,KAAC,MAAM;QAAC,WAAW;QAAC,OAAO,EAAEX,oBAAqB;QAAA,UAChD,KAAC,IAAI;UAAC,MAAM;UAAA;QAAA;MAAY,EACjB;IAAA;EACE,EACA;AAEnB,CAAC;AAED,eAAeX,oBAAoB"},"metadata":{},"sourceType":"module"}