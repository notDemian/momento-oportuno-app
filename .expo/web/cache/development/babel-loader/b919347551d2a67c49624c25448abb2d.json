{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useScrollToTop } from '@react-navigation/native';\nimport { Icon, Divider } from \"../../elements\";\nimport ListRowItem from \"../../elements/List/ListRowItem\";\nimport useThemeColors from \"../../../custom-hooks/useThemeColors\";\nimport { notifications } from \"../../../data/mock-notification\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NotificationScreen = function NotificationScreen() {\n  var chevronIconName = I18nManager.isRTL ? 'chevron-left' : 'chevron-right';\n  var _useThemeColors = useThemeColors(),\n    primary = _useThemeColors.primary;\n  var scrollViewRef = React.useRef(null);\n  useScrollToTop(scrollViewRef);\n  return _jsx(ScrollView, {\n    ref: scrollViewRef,\n    children: notifications.map(function (item) {\n      return _jsxs(View, {\n        children: [_jsx(ListRowItem, _objectSpread({\n          leftIcon: _jsx(View, {\n            style: [{\n              backgroundColor: primary\n            }, styles.notificationIconContainer],\n            children: _jsx(Icon, {\n              name: \"envelope\",\n              solid: true,\n              color: \"white\"\n            })\n          }),\n          rightIcon: _jsx(Icon, {\n            name: chevronIconName\n          })\n        }, item)), _jsx(Divider, {})]\n      }, item.id);\n    })\n  });\n};\nexport default NotificationScreen;","map":{"version":3,"names":["React","useScrollToTop","Icon","Divider","ListRowItem","useThemeColors","notifications","styles","NotificationScreen","chevronIconName","I18nManager","isRTL","primary","scrollViewRef","useRef","map","item","backgroundColor","notificationIconContainer","id"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/components/screens/Notification/Notification.tsx"],"sourcesContent":["import * as React from 'react';\nimport {I18nManager, ScrollView, View} from 'react-native';\nimport {useScrollToTop} from '@react-navigation/native';\nimport {Icon, Divider} from '@src/components/elements';\nimport ListRowItem from '@src/components/elements/List/ListRowItem';\nimport useThemeColors from '@src/custom-hooks/useThemeColors';\nimport {notifications, Notification} from '@src/data/mock-notification';\nimport styles from './styles';\n\ntype NotificationScreenProps = {};\n\nconst NotificationScreen: React.FC<NotificationScreenProps> = () => {\n  const chevronIconName = I18nManager.isRTL ? 'chevron-left' : 'chevron-right';\n  const {primary} = useThemeColors();\n  const scrollViewRef = React.useRef(null);\n\n  useScrollToTop(scrollViewRef);\n\n  return (\n    <ScrollView ref={scrollViewRef}>\n      {notifications.map((item: Notification) => {\n        return (\n          <View key={item.id}>\n            <ListRowItem\n              leftIcon={\n                <View\n                  style={[\n                    {backgroundColor: primary},\n                    styles.notificationIconContainer,\n                  ]}>\n                  <Icon name=\"envelope\" solid color=\"white\" />\n                </View>\n              }\n              rightIcon={<Icon name={chevronIconName} />}\n              {...item}\n            />\n            <Divider />\n          </View>\n        );\n      })}\n    </ScrollView>\n  );\n};\n\nexport default NotificationScreen;\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAAA;AAE/B,SAAQC,cAAc,QAAO,0BAA0B;AACvD,SAAQC,IAAI,EAAEC,OAAO;AACrB,OAAOC,WAAW;AAClB,OAAOC,cAAc;AACrB,SAAQC,aAAa;AACrB,OAAOC,MAAM;AAAiB;AAAA;AAI9B,IAAMC,kBAAqD,GAAG,SAAxDA,kBAAqD,GAAS;EAClE,IAAMC,eAAe,GAAGC,WAAW,CAACC,KAAK,GAAG,cAAc,GAAG,eAAe;EAC5E,sBAAkBN,cAAc,EAAE;IAA3BO,OAAO,mBAAPA,OAAO;EACd,IAAMC,aAAa,GAAGb,KAAK,CAACc,MAAM,CAAC,IAAI,CAAC;EAExCb,cAAc,CAACY,aAAa,CAAC;EAE7B,OACE,KAAC,UAAU;IAAC,GAAG,EAAEA,aAAc;IAAA,UAC5BP,aAAa,CAACS,GAAG,CAAC,UAACC,IAAkB,EAAK;MACzC,OACE,MAAC,IAAI;QAAA,WACH,KAAC,WAAW;UACV,QAAQ,EACN,KAAC,IAAI;YACH,KAAK,EAAE,CACL;cAACC,eAAe,EAAEL;YAAO,CAAC,EAC1BL,MAAM,CAACW,yBAAyB,CAChC;YAAA,UACF,KAAC,IAAI;cAAC,IAAI,EAAC,UAAU;cAAC,KAAK;cAAC,KAAK,EAAC;YAAO;UAAG,EAE/C;UACD,SAAS,EAAE,KAAC,IAAI;YAAC,IAAI,EAAET;UAAgB;QAAI,GACvCO,IAAI,EACR,EACF,KAAC,OAAO,KAAG;MAAA,GAdFA,IAAI,CAACG,EAAE,CAeX;IAEX,CAAC;EAAC,EACS;AAEjB,CAAC;AAED,eAAeX,kBAAkB"},"metadata":{},"sourceType":"module"}