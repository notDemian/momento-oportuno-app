{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"coverImage\", \"title\", \"subTitle\", \"children\", \"parallaxProps\", \"isSmallCover\", \"onPress\", \"titleStyle\", \"subTitleStyle\", \"style\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useTheme } from '@react-navigation/native';\nimport Touchable from \"../Touchable\";\nimport Container from \"../Container\";\nimport Text from \"../Text\";\nimport styles from \"./styles\";\nimport { ParallaxImage } from 'react-native-snap-carousel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Card = function Card(_ref) {\n  var coverImage = _ref.coverImage,\n    title = _ref.title,\n    subTitle = _ref.subTitle,\n    children = _ref.children,\n    parallaxProps = _ref.parallaxProps,\n    isSmallCover = _ref.isSmallCover,\n    onPress = _ref.onPress,\n    titleStyle = _ref.titleStyle,\n    subTitleStyle = _ref.subTitleStyle,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    card = _useTheme.colors.card;\n  var _renderCard = function _renderCard() {\n    return _jsxs(Container, _objectSpread(_objectSpread({\n      style: [{\n        backgroundColor: card\n      }, styles.card, style]\n    }, rest), {}, {\n      children: [coverImage && _jsx(Container, {\n        style: isSmallCover ? styles.coverImageSmallContainer : styles.coverImageContainer,\n        children: parallaxProps ? _jsx(ParallaxImage, _objectSpread({\n          parallaxFactor: 0.4,\n          source: coverImage,\n          style: styles.coverImage,\n          containerStyle: styles.parallaxImageContainer\n        }, parallaxProps)) : _jsx(Image, {\n          source: coverImage,\n          style: styles.coverImage\n        })\n      }), _jsxs(Container, {\n        style: styles.cardBody,\n        children: [title && _jsx(Text, {\n          numberOfLines: 1,\n          style: [styles.cardTitle, titleStyle],\n          children: title\n        }), subTitle && _jsx(Text, {\n          numberOfLines: 1,\n          style: [styles.cardSubtitle, subTitleStyle],\n          children: subTitle\n        }), children]\n      })]\n    }));\n  };\n  return onPress ? _jsx(Touchable, {\n    onPress: onPress,\n    children: _renderCard()\n  }) : _renderCard();\n};\nexport default Card;","map":{"version":3,"names":["React","useTheme","Touchable","Container","Text","styles","ParallaxImage","Card","coverImage","title","subTitle","children","parallaxProps","isSmallCover","onPress","titleStyle","subTitleStyle","style","rest","card","colors","_renderCard","backgroundColor","coverImageSmallContainer","coverImageContainer","parallaxImageContainer","cardBody","cardTitle","cardSubtitle"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/components/elements/Card/Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  ViewProps,\n  StyleProp,\n  TextStyle,\n  ImageSourcePropType,\n} from 'react-native';\nimport {useTheme} from '@react-navigation/native';\nimport Touchable from '../Touchable';\nimport Container from '../Container';\nimport Text from '../Text';\nimport styles from './styles';\nimport {\n  ParallaxImage,\n  AdditionalParallaxProps,\n} from 'react-native-snap-carousel';\n\ntype OwnProps = {\n  coverImage?: ImageSourcePropType;\n  title?: string;\n  subTitle?: string;\n  parallaxProps?: AdditionalParallaxProps;\n  isSmallCover?: boolean;\n  titleStyle?: StyleProp<TextStyle>;\n  subTitleStyle?: StyleProp<TextStyle>;\n  onPress?: () => void;\n};\n\ntype CardProps = OwnProps & ViewProps;\n\nconst Card: React.FC<CardProps> = ({\n  coverImage,\n  title,\n  subTitle,\n  children,\n  parallaxProps,\n  isSmallCover,\n  onPress,\n  titleStyle,\n  subTitleStyle,\n  style,\n  ...rest\n}) => {\n  const {\n    colors: {card},\n  } = useTheme();\n\n  const _renderCard = () => {\n    return (\n      <Container\n        style={[{backgroundColor: card}, styles.card, style]}\n        {...rest}>\n        {coverImage && (\n          <Container\n            style={\n              isSmallCover\n                ? styles.coverImageSmallContainer\n                : styles.coverImageContainer\n            }>\n            {parallaxProps ? (\n              <ParallaxImage\n                parallaxFactor={0.4}\n                source={coverImage}\n                style={styles.coverImage}\n                containerStyle={styles.parallaxImageContainer}\n                {...parallaxProps}\n              />\n            ) : (\n              <Image source={coverImage} style={styles.coverImage} />\n            )}\n          </Container>\n        )}\n        <Container style={styles.cardBody}>\n          {title && (\n            <Text numberOfLines={1} style={[styles.cardTitle, titleStyle]}>\n              {title}\n            </Text>\n          )}\n          {subTitle && (\n            <Text\n              numberOfLines={1}\n              style={[styles.cardSubtitle, subTitleStyle]}>\n              {subTitle}\n            </Text>\n          )}\n          {children}\n        </Container>\n      </Container>\n    );\n  };\n\n  return onPress ? (\n    <Touchable onPress={onPress}>{_renderCard()}</Touchable>\n  ) : (\n    _renderCard()\n  );\n};\n\nexport default Card;\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAQ/B,SAAQC,QAAQ,QAAO,0BAA0B;AACjD,OAAOC,SAAS;AAChB,OAAOC,SAAS;AAChB,OAAOC,IAAI;AACX,OAAOC,MAAM;AACb,SACEC,aAAa,QAER,4BAA4B;AAAC;AAAA;AAepC,IAAMC,IAAyB,GAAG,SAA5BA,IAAyB,OAYzB;EAAA,IAXJC,UAAU,QAAVA,UAAU;IACVC,KAAK,QAALA,KAAK;IACLC,QAAQ,QAARA,QAAQ;IACRC,QAAQ,QAARA,QAAQ;IACRC,aAAa,QAAbA,aAAa;IACbC,YAAY,QAAZA,YAAY;IACZC,OAAO,QAAPA,OAAO;IACPC,UAAU,QAAVA,UAAU;IACVC,aAAa,QAAbA,aAAa;IACbC,KAAK,QAALA,KAAK;IACFC,IAAI;EAEP,gBAEIjB,QAAQ,EAAE;IADHkB,IAAI,aAAbC,MAAM,CAAGD,IAAI;EAGf,IAAME,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxB,OACE,MAAC,SAAS;MACR,KAAK,EAAE,CAAC;QAACC,eAAe,EAAEH;MAAI,CAAC,EAAEd,MAAM,CAACc,IAAI,EAAEF,KAAK;IAAE,GACjDC,IAAI;MAAA,WACPV,UAAU,IACT,KAAC,SAAS;QACR,KAAK,EACHK,YAAY,GACRR,MAAM,CAACkB,wBAAwB,GAC/BlB,MAAM,CAACmB,mBACZ;QAAA,UACAZ,aAAa,GACZ,KAAC,aAAa;UACZ,cAAc,EAAE,GAAI;UACpB,MAAM,EAAEJ,UAAW;UACnB,KAAK,EAAEH,MAAM,CAACG,UAAW;UACzB,cAAc,EAAEH,MAAM,CAACoB;QAAuB,GAC1Cb,aAAa,EACjB,GAEF,KAAC,KAAK;UAAC,MAAM,EAAEJ,UAAW;UAAC,KAAK,EAAEH,MAAM,CAACG;QAAW;MACrD,EAEJ,EACD,MAAC,SAAS;QAAC,KAAK,EAAEH,MAAM,CAACqB,QAAS;QAAA,WAC/BjB,KAAK,IACJ,KAAC,IAAI;UAAC,aAAa,EAAE,CAAE;UAAC,KAAK,EAAE,CAACJ,MAAM,CAACsB,SAAS,EAAEZ,UAAU,CAAE;UAAA,UAC3DN;QAAK,EAET,EACAC,QAAQ,IACP,KAAC,IAAI;UACH,aAAa,EAAE,CAAE;UACjB,KAAK,EAAE,CAACL,MAAM,CAACuB,YAAY,EAAEZ,aAAa,CAAE;UAAA,UAC3CN;QAAQ,EAEZ,EACAC,QAAQ;MAAA,EACC;IAAA,GACF;EAEhB,CAAC;EAED,OAAOG,OAAO,GACZ,KAAC,SAAS;IAAC,OAAO,EAAEA,OAAQ;IAAA,UAAEO,WAAW;EAAE,EAAa,GAExDA,WAAW,EACZ;AACH,CAAC;AAED,eAAed,IAAI"},"metadata":{},"sourceType":"module"}