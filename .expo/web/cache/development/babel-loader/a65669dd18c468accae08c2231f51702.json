{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"icon\", \"backgroundColor\", \"isTransparent\", \"isFullWidth\", \"isChildrenCentered\", \"isLoading\", \"style\", \"childrenContainerStyle\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport { useTheme } from '@react-navigation/native';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport styles from \"./styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Button = function Button(_ref) {\n  var children = _ref.children,\n    icon = _ref.icon,\n    backgroundColor = _ref.backgroundColor,\n    isTransparent = _ref.isTransparent,\n    isFullWidth = _ref.isFullWidth,\n    _ref$isChildrenCenter = _ref.isChildrenCentered,\n    isChildrenCentered = _ref$isChildrenCenter === void 0 ? true : _ref$isChildrenCenter,\n    isLoading = _ref.isLoading,\n    style = _ref.style,\n    childrenContainerStyle = _ref.childrenContainerStyle,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _useTheme = useTheme(),\n    baseBackgroundColor = _useTheme.colors.primary;\n  var buttonBackgroundColor = backgroundColor || baseBackgroundColor;\n  var buttonBorderColor = backgroundColor || baseBackgroundColor;\n  var buttonBorderWidth = 1;\n  var padding = 15;\n  var width = 'auto';\n  var align = 'flex-start';\n  if (isTransparent) {\n    buttonBackgroundColor = 'transparent';\n    buttonBorderWidth = 0;\n    padding = 0;\n  }\n  if (isFullWidth) {\n    width = '100%';\n  }\n  if (isChildrenCentered) {\n    align = 'center';\n  }\n  return _jsxs(TouchableOpacity, _objectSpread(_objectSpread({\n    style: [styles.button, {\n      backgroundColor: buttonBackgroundColor,\n      borderColor: buttonBorderColor,\n      borderWidth: buttonBorderWidth,\n      padding: padding,\n      width: width\n    }, style]\n  }, rest), {}, {\n    children: [icon && _jsx(View, {\n      style: styles.iconContainer,\n      children: icon\n    }), _jsx(View, {\n      style: [styles.buttonChildrenContainer, {\n        width: width,\n        justifyContent: align\n      }, childrenContainerStyle],\n      children: isLoading ? _jsx(ActivityIndicator, {\n        size: \"small\",\n        color: \"white\"\n      }) : children\n    })]\n  }));\n};\nexport default Button;","map":{"version":3,"names":["React","useTheme","styles","Button","children","icon","backgroundColor","isTransparent","isFullWidth","isChildrenCentered","isLoading","style","childrenContainerStyle","rest","baseBackgroundColor","colors","primary","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","padding","width","align","button","borderColor","borderWidth","iconContainer","buttonChildrenContainer","justifyContent"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/components/elements/Button/Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {useTheme} from '@react-navigation/native';\nimport {\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewStyle,\n  StyleProp,\n  ActivityIndicator,\n} from 'react-native';\nimport styles from './styles';\n\ninterface ButtonProps extends TouchableOpacityProps {\n  children: React.ReactNode;\n  backgroundColor?: string;\n  icon?: React.ReactElement;\n  isTransparent?: boolean;\n  isFullWidth?: boolean;\n  isChildrenCentered?: boolean;\n  isLoading?: boolean;\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\nconst Button: React.FC<ButtonProps> = ({\n  children,\n  icon,\n  backgroundColor,\n  isTransparent,\n  isFullWidth,\n  isChildrenCentered = true,\n  isLoading,\n  style,\n  childrenContainerStyle,\n  ...rest\n}) => {\n  const {\n    colors: {primary: baseBackgroundColor},\n  } = useTheme();\n  let buttonBackgroundColor = backgroundColor || baseBackgroundColor;\n  let buttonBorderColor = backgroundColor || baseBackgroundColor;\n  let buttonBorderWidth = 1;\n  let padding = 15;\n  let width = 'auto';\n  let align:\n    | 'flex-start'\n    | 'center'\n    | 'flex-end'\n    | 'space-between'\n    | 'space-around'\n    | 'space-evenly'\n    | undefined = 'flex-start';\n\n  if (isTransparent) {\n    buttonBackgroundColor = 'transparent';\n    buttonBorderWidth = 0;\n    padding = 0;\n  }\n  if (isFullWidth) {\n    width = '100%';\n  }\n  if (isChildrenCentered) {\n    align = 'center';\n  }\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.button,\n        {\n          backgroundColor: buttonBackgroundColor,\n          borderColor: buttonBorderColor,\n          borderWidth: buttonBorderWidth,\n          padding: padding,\n          width,\n        },\n        style,\n      ]}\n      {...rest}>\n      {icon && <View style={styles.iconContainer}>{icon}</View>}\n      <View\n        style={[\n          styles.buttonChildrenContainer,\n          {\n            width,\n            justifyContent: align,\n          },\n          childrenContainerStyle,\n        ]}>\n        {isLoading ? (\n          <ActivityIndicator size=\"small\" color=\"white\" />\n        ) : (\n          children\n        )}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport default Button;\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAAQC,QAAQ,QAAO,0BAA0B;AAAC;AAAA;AAAA;AASlD,OAAOC,MAAM;AAAiB;AAAA;AAa9B,IAAMC,MAA6B,GAAG,SAAhCA,MAA6B,OAW7B;EAAA,IAVJC,QAAQ,QAARA,QAAQ;IACRC,IAAI,QAAJA,IAAI;IACJC,eAAe,QAAfA,eAAe;IACfC,aAAa,QAAbA,aAAa;IACbC,WAAW,QAAXA,WAAW;IAAA,6BACXC,kBAAkB;IAAlBA,kBAAkB,sCAAG,IAAI;IACzBC,SAAS,QAATA,SAAS;IACTC,KAAK,QAALA,KAAK;IACLC,sBAAsB,QAAtBA,sBAAsB;IACnBC,IAAI;EAEP,gBAEIZ,QAAQ,EAAE;IADMa,mBAAmB,aAArCC,MAAM,CAAGC,OAAO;EAElB,IAAIC,qBAAqB,GAAGX,eAAe,IAAIQ,mBAAmB;EAClE,IAAII,iBAAiB,GAAGZ,eAAe,IAAIQ,mBAAmB;EAC9D,IAAIK,iBAAiB,GAAG,CAAC;EACzB,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,KAAK,GAAG,MAAM;EAClB,IAAIC,KAOS,GAAG,YAAY;EAE5B,IAAIf,aAAa,EAAE;IACjBU,qBAAqB,GAAG,aAAa;IACrCE,iBAAiB,GAAG,CAAC;IACrBC,OAAO,GAAG,CAAC;EACb;EACA,IAAIZ,WAAW,EAAE;IACfa,KAAK,GAAG,MAAM;EAChB;EACA,IAAIZ,kBAAkB,EAAE;IACtBa,KAAK,GAAG,QAAQ;EAClB;EAEA,OACE,MAAC,gBAAgB;IACf,KAAK,EAAE,CACLpB,MAAM,CAACqB,MAAM,EACb;MACEjB,eAAe,EAAEW,qBAAqB;MACtCO,WAAW,EAAEN,iBAAiB;MAC9BO,WAAW,EAAEN,iBAAiB;MAC9BC,OAAO,EAAEA,OAAO;MAChBC,KAAK,EAALA;IACF,CAAC,EACDV,KAAK;EACL,GACEE,IAAI;IAAA,WACPR,IAAI,IAAI,KAAC,IAAI;MAAC,KAAK,EAAEH,MAAM,CAACwB,aAAc;MAAA,UAAErB;IAAI,EAAQ,EACzD,KAAC,IAAI;MACH,KAAK,EAAE,CACLH,MAAM,CAACyB,uBAAuB,EAC9B;QACEN,KAAK,EAALA,KAAK;QACLO,cAAc,EAAEN;MAClB,CAAC,EACDV,sBAAsB,CACtB;MAAA,UACDF,SAAS,GACR,KAAC,iBAAiB;QAAC,IAAI,EAAC,OAAO;QAAC,KAAK,EAAC;MAAO,EAAG,GAEhDN;IACD,EACI;EAAA,GACU;AAEvB,CAAC;AAED,eAAeD,MAAM"},"metadata":{},"sourceType":"module"}