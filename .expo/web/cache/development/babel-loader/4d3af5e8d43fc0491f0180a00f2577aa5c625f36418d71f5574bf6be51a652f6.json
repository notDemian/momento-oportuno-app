{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"onPress\", \"label\", \"isFullWidth\", \"textAlign\", \"variant\", \"buttonSize\", \"children\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport { createBox } from '@shopify/restyle';\nimport { Text } from \"../Text\";\nimport { getTextColor, getTextFontSize } from \"./Button.util\";\nimport { ButtonContainer } from \"./ButtonContainer\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar InnerTouchableHighlight = createBox(TouchableHighlight);\nexport var Button = function Button(_ref) {\n  var onPress = _ref.onPress,\n    label = _ref.label,\n    isFullWidth = _ref.isFullWidth,\n    _ref$textAlign = _ref.textAlign,\n    textAlign = _ref$textAlign === void 0 ? 'center' : _ref$textAlign,\n    variant = _ref.variant,\n    buttonSize = _ref.buttonSize,\n    children = _ref.children,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var alignSelf = isFullWidth ? 'auto' : 'flex-start';\n  var textColor = getTextColor(variant);\n  var fontSize = getTextFontSize(buttonSize);\n  var renderContent = function renderContent() {\n    if (children) {\n      return children;\n    }\n    return _jsx(Text, {\n      color: textColor,\n      textAlign: textAlign,\n      fontSize: fontSize,\n      children: label\n    });\n  };\n  return _jsx(InnerTouchableHighlight, _objectSpread(_objectSpread({\n    alignSelf: alignSelf,\n    onPress: onPress,\n    activeOpacity: 0.7,\n    underlayColor: \"transparent\"\n  }, rest), {}, {\n    children: _jsx(ButtonContainer, {\n      borderRadius: \"m\",\n      variant: variant,\n      buttonSize: buttonSize,\n      children: renderContent()\n    })\n  }));\n};","map":{"version":3,"names":["createBox","Text","getTextColor","getTextFontSize","ButtonContainer","jsx","_jsx","InnerTouchableHighlight","TouchableHighlight","Button","_ref","onPress","label","isFullWidth","_ref$textAlign","textAlign","variant","buttonSize","children","rest","_objectWithoutProperties","_excluded","alignSelf","textColor","fontSize","renderContent","color","_objectSpread","activeOpacity","underlayColor","borderRadius"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/components/Button/Button.tsx"],"sourcesContent":["import { TouchableHighlight, TouchableHighlightProps } from 'react-native';\n\nimport { LayoutProps, createBox } from '@shopify/restyle';\nimport { Theme } from '@src/theme';\nimport { Text } from '../Text';\nimport { ButtonProps } from './Button.type';\nimport { getTextColor, getTextFontSize } from './Button.util';\nimport { ButtonContainer } from './ButtonContainer';\n\nconst InnerTouchableHighlight = createBox<Theme, TouchableHighlightProps>(\n  TouchableHighlight,\n);\n\nexport const Button = ({\n  onPress,\n  label,\n  isFullWidth,\n  textAlign = 'center',\n  variant,\n  buttonSize,\n  children,\n  ...rest\n}: ButtonProps) => {\n  const alignSelf: LayoutProps<Theme>['alignSelf'] = isFullWidth\n    ? 'auto'\n    : 'flex-start';\n  const textColor = getTextColor(variant);\n  const fontSize = getTextFontSize(buttonSize);\n\n  const renderContent = () => {\n    if (children) {\n      return children;\n    }\n    return (\n      <Text color={textColor} textAlign={textAlign} fontSize={fontSize}>\n        {label}\n      </Text>\n    );\n  };\n\n  return (\n    <InnerTouchableHighlight\n      alignSelf={alignSelf}\n      onPress={onPress}\n      activeOpacity={0.7}\n      underlayColor=\"transparent\"\n      {...rest}>\n      <ButtonContainer\n        borderRadius=\"m\"\n        variant={variant}\n        buttonSize={buttonSize}>\n        {renderContent()}\n      </ButtonContainer>\n    </InnerTouchableHighlight>\n  );\n};\n"],"mappings":";;;;;;AAEA,SAAsBA,SAAS,QAAQ,kBAAkB;AAEzD,SAASC,IAAI;AAEb,SAASC,YAAY,EAAEC,eAAe;AACtC,SAASC,eAAe;AAA4B,SAAAC,GAAA,IAAAC,IAAA;AAEpD,IAAMC,uBAAuB,GAAGP,SAAS,CACvCQ,kBACF,CAAC;AAED,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAMA,CAAAC,IAAA,EASA;EAAA,IARjBC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IACPC,KAAK,GAAAF,IAAA,CAALE,KAAK;IACLC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IAAAC,cAAA,GAAAJ,IAAA,CACXK,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAG,QAAQ,GAAAA,cAAA;IACpBE,OAAO,GAAAN,IAAA,CAAPM,OAAO;IACPC,UAAU,GAAAP,IAAA,CAAVO,UAAU;IACVC,QAAQ,GAAAR,IAAA,CAARQ,QAAQ;IACLC,IAAI,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;EAEP,IAAMC,SAA0C,GAAGT,WAAW,GAC1D,MAAM,GACN,YAAY;EAChB,IAAMU,SAAS,GAAGrB,YAAY,CAACc,OAAO,CAAC;EACvC,IAAMQ,QAAQ,GAAGrB,eAAe,CAACc,UAAU,CAAC;EAE5C,IAAMQ,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;IAC1B,IAAIP,QAAQ,EAAE;MACZ,OAAOA,QAAQ;IACjB;IACA,OACEZ,IAAA,CAACL,IAAI;MAACyB,KAAK,EAAEH,SAAU;MAACR,SAAS,EAAEA,SAAU;MAACS,QAAQ,EAAEA,QAAS;MAAAN,QAAA,EAC9DN;IAAK,CACF,CAAC;EAEX,CAAC;EAED,OACEN,IAAA,CAACC,uBAAuB,EAAAoB,aAAA,CAAAA,aAAA;IACtBL,SAAS,EAAEA,SAAU;IACrBX,OAAO,EAAEA,OAAQ;IACjBiB,aAAa,EAAE,GAAI;IACnBC,aAAa,EAAC;EAAa,GACvBV,IAAI;IAAAD,QAAA,EACRZ,IAAA,CAACF,eAAe;MACd0B,YAAY,EAAC,GAAG;MAChBd,OAAO,EAAEA,OAAQ;MACjBC,UAAU,EAAEA,UAAW;MAAAC,QAAA,EACtBO,aAAa,CAAC;IAAC,CACD;EAAC,EACK,CAAC;AAE9B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}