{"ast":null,"code":"import 'react-native-gesture-handler';\nimport React, { useContext } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { theme as defaultTheme, darkTheme, ThemeContext, getNavigationTheme } from \"../theme\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport TabNavigation from \"./TabNavigation\";\nimport { Box } from \"../components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar RootStack = createNativeStackNavigator();\nexport var RootNavigation = function RootNavigation() {\n  var _useContext = useContext(ThemeContext),\n    theme = _useContext.theme;\n  var navigationTheme = React.useMemo(function () {\n    return getNavigationTheme(theme);\n  }, [theme]);\n  return _jsx(NavigationContainer, {\n    theme: navigationTheme,\n    children: _jsxs(Box, {\n      flex: 1,\n      children: [_jsx(StatusBar, {\n        backgroundColor: theme === 'light' ? defaultTheme.colors.background : darkTheme.colors.background,\n        barStyle: theme === 'light' ? 'dark-content' : 'light-content'\n      }), _jsx(RootStack.Navigator, {\n        screenOptions: {\n          presentation: 'modal'\n        },\n        children: _jsx(RootStack.Screen, {\n          name: \"Main\",\n          options: {\n            headerShown: false\n          },\n          component: TabNavigation\n        })\n      })]\n    })\n  });\n};","map":{"version":3,"names":["React","useContext","StatusBar","NavigationContainer","theme","defaultTheme","darkTheme","ThemeContext","getNavigationTheme","createNativeStackNavigator","TabNavigation","Box","jsx","_jsx","jsxs","_jsxs","RootStack","RootNavigation","_useContext","navigationTheme","useMemo","children","flex","backgroundColor","colors","background","barStyle","Navigator","screenOptions","presentation","Screen","name","options","headerShown","component"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/navigation/RootNavigation.tsx"],"sourcesContent":["import 'react-native-gesture-handler';\nimport React, { useContext } from 'react';\nimport { StatusBar } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport {\n  theme as defaultTheme,\n  darkTheme,\n  ThemeContext,\n  getNavigationTheme,\n} from '@src/theme';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport TabNavigation from './TabNavigation';\nimport { Box } from '@src/components';\n\nconst RootStack = createNativeStackNavigator();\n\nexport const RootNavigation = () => {\n  const { theme } = useContext(ThemeContext);\n\n  const navigationTheme = React.useMemo(() => {\n    return getNavigationTheme(theme);\n  }, [theme]);\n\n  return (\n    <NavigationContainer theme={navigationTheme}>\n      <Box flex={1}>\n        <StatusBar\n          backgroundColor={\n            theme === 'light'\n              ? defaultTheme.colors.background\n              : darkTheme.colors.background\n          }\n          barStyle={theme === 'light' ? 'dark-content' : 'light-content'}\n        />\n        <RootStack.Navigator\n          screenOptions={{\n            presentation: 'modal',\n          }}>\n          <RootStack.Screen\n            name=\"Main\"\n            options={{ headerShown: false }}\n            component={TabNavigation}\n          />\n          {/* <RootStack.Screen\n            options={{\n              headerTransparent: true,\n              title: '',\n              headerBackTitleVisible: false,\n            }}\n            name=\"DishDetailsModal\"\n            component={DishDetails}\n          /> */}\n          {/* <RootStack.Screen\n            options={{\n              headerShown: false,\n              cardOverlayEnabled: true,\n              cardStyleInterpolator: ({current: {progress}}) => ({\n                cardStyle: {\n                  opacity: progress.interpolate({\n                    inputRange: [0, 0.5, 0.9, 1],\n                    outputRange: [0, 0.25, 0.7, 1],\n                  }),\n                },\n                overlayStyle: {\n                  opacity: progress.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [0, 0.5],\n                    extrapolate: 'clamp',\n                  }),\n                },\n              }),\n            }}\n            name=\"SearchDishesModal\"\n            component={SearchDishes}\n          /> */}\n        </RootStack.Navigator>\n      </Box>\n    </NavigationContainer>\n  );\n};\n"],"mappings":"AAAA,OAAO,8BAA8B;AACrC,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAAC,OAAAC,SAAA;AAE1C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SACEC,KAAK,IAAIC,YAAY,EACrBC,SAAS,EACTC,YAAY,EACZC,kBAAkB;AAEpB,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,aAAa;AACpB,SAASC,GAAG;AAA0B,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEtC,IAAMC,SAAS,GAAGP,0BAA0B,CAAC,CAAC;AAE9C,OAAO,IAAMQ,cAAc,GAAG,SAAjBA,cAAcA,CAAA,EAAS;EAClC,IAAAC,WAAA,GAAkBjB,UAAU,CAACM,YAAY,CAAC;IAAlCH,KAAK,GAAAc,WAAA,CAALd,KAAK;EAEb,IAAMe,eAAe,GAAGnB,KAAK,CAACoB,OAAO,CAAC,YAAM;IAC1C,OAAOZ,kBAAkB,CAACJ,KAAK,CAAC;EAClC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,OACES,IAAA,CAACV,mBAAmB;IAACC,KAAK,EAAEe,eAAgB;IAAAE,QAAA,EAC1CN,KAAA,CAACJ,GAAG;MAACW,IAAI,EAAE,CAAE;MAAAD,QAAA,GACXR,IAAA,CAACX,SAAS;QACRqB,eAAe,EACbnB,KAAK,KAAK,OAAO,GACbC,YAAY,CAACmB,MAAM,CAACC,UAAU,GAC9BnB,SAAS,CAACkB,MAAM,CAACC,UACtB;QACDC,QAAQ,EAAEtB,KAAK,KAAK,OAAO,GAAG,cAAc,GAAG;MAAgB,CAChE,CAAC,EACFS,IAAA,CAACG,SAAS,CAACW,SAAS;QAClBC,aAAa,EAAE;UACbC,YAAY,EAAE;QAChB,CAAE;QAAAR,QAAA,EACFR,IAAA,CAACG,SAAS,CAACc,MAAM;UACfC,IAAI,EAAC,MAAM;UACXC,OAAO,EAAE;YAAEC,WAAW,EAAE;UAAM,CAAE;UAChCC,SAAS,EAAExB;QAAc,CAC1B;MAAC,CAiCiB,CAAC;IAAA,CACnB;EAAC,CACa,CAAC;AAE1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}