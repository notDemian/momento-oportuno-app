{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport DeliveryTime from \"./DeliveryTime\";\nimport DeliveryStep from \"./DeliveryStep\";\nimport DriverInformation from \"./DriverInformation\";\nimport { Divider, Container, Button, Text } from \"../../elements\";\nimport { useNavigation } from '@react-navigation/native';\nimport styles from \"./styles\";\nimport DeliveryMapView from \"./DeliveryMapView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar TrackOrder = function TrackOrder() {\n  var navigation = useNavigation();\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isMapViewVisible = _React$useState2[0],\n    setIsMapViewVisible = _React$useState2[1];\n  var _onOrderSomethingElseButtonPressed = function _onOrderSomethingElseButtonPressed() {\n    navigation.navigate('HomeScreen');\n  };\n  var _onMapViewButtonPressed = function _onMapViewButtonPressed() {\n    setIsMapViewVisible(!isMapViewVisible);\n  };\n  return _jsxs(SafeAreaView, {\n    style: styles.root,\n    children: [_jsxs(ScrollView, {\n      contentContainerStyle: styles.scrollViewContentContainerStyle,\n      children: [_jsxs(Container, {\n        children: [_jsx(DeliveryTime, {}), _jsx(Divider, {}), _jsx(DriverInformation, {})]\n      }), isMapViewVisible ? _jsx(DeliveryMapView, {}) : _jsx(DeliveryStep, {})]\n    }), _jsxs(Container, {\n      style: styles.footerButtonContainer,\n      children: [_jsx(Button, {\n        isFullWidth: true,\n        onPress: _onMapViewButtonPressed,\n        children: _jsx(Text, {\n          isWhite: true,\n          isBold: true,\n          style: styles.mapViewText,\n          children: !isMapViewVisible ? 'Map View' : 'Order Status View'\n        })\n      }), _jsx(Button, {\n        isFullWidth: true,\n        isTransparent: true,\n        onPress: _onOrderSomethingElseButtonPressed,\n        style: styles.cancelOrderButton,\n        children: _jsx(Text, {\n          children: \"Cancel your order\"\n        })\n      })]\n    })]\n  });\n};\nexport default TrackOrder;","map":{"version":3,"names":["React","DeliveryTime","DeliveryStep","DriverInformation","Divider","Container","Button","Text","useNavigation","styles","DeliveryMapView","TrackOrder","navigation","useState","isMapViewVisible","setIsMapViewVisible","_onOrderSomethingElseButtonPressed","navigate","_onMapViewButtonPressed","root","scrollViewContentContainerStyle","footerButtonContainer","mapViewText","cancelOrderButton"],"sources":["/Users/vunguyen/Documents/work/jcstudio/food-star-expo-app-template/src/components/screens/TrackOrder/TrackOrder.tsx"],"sourcesContent":["import * as React from 'react';\nimport {ScrollView, SafeAreaView} from 'react-native';\nimport DeliveryTime from './DeliveryTime';\nimport DeliveryStep from './DeliveryStep';\nimport DriverInformation from './DriverInformation';\nimport {Divider, Container, Button, Text} from '@src/components/elements';\nimport {useNavigation} from '@react-navigation/native';\nimport styles from './styles';\nimport DeliveryMapView from './DeliveryMapView';\n\ntype TrackOrderProps = {};\n\nconst TrackOrder: React.FC<TrackOrderProps> = () => {\n  const navigation = useNavigation();\n  const [isMapViewVisible, setIsMapViewVisible] = React.useState(false);\n\n  const _onOrderSomethingElseButtonPressed = () => {\n    navigation.navigate('HomeScreen');\n  };\n\n  const _onMapViewButtonPressed = () => {\n    setIsMapViewVisible(!isMapViewVisible);\n  };\n\n  return (\n    <SafeAreaView style={styles.root}>\n      <ScrollView\n        contentContainerStyle={styles.scrollViewContentContainerStyle}>\n        <Container>\n          <DeliveryTime />\n          <Divider />\n          <DriverInformation />\n        </Container>\n        {isMapViewVisible ? <DeliveryMapView /> : <DeliveryStep />}\n      </ScrollView>\n      <Container style={styles.footerButtonContainer}>\n        <Button isFullWidth onPress={_onMapViewButtonPressed}>\n          <Text isWhite isBold style={styles.mapViewText}>\n            {!isMapViewVisible ? 'Map View' : 'Order Status View'}\n          </Text>\n        </Button>\n        <Button\n          isFullWidth\n          isTransparent\n          onPress={_onOrderSomethingElseButtonPressed}\n          style={styles.cancelOrderButton}>\n          <Text>Cancel your order</Text>\n        </Button>\n      </Container>\n    </SafeAreaView>\n  );\n};\n\nexport default TrackOrder;\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC;AAAA;AAE/B,OAAOC,YAAY;AACnB,OAAOC,YAAY;AACnB,OAAOC,iBAAiB;AACxB,SAAQC,OAAO,EAAEC,SAAS,EAAEC,MAAM,EAAEC,IAAI;AACxC,SAAQC,aAAa,QAAO,0BAA0B;AACtD,OAAOC,MAAM;AACb,OAAOC,eAAe;AAA0B;AAAA;AAIhD,IAAMC,UAAqC,GAAG,SAAxCA,UAAqC,GAAS;EAClD,IAAMC,UAAU,GAAGJ,aAAa,EAAE;EAClC,sBAAgDR,KAAK,CAACa,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA9DC,gBAAgB;IAAEC,mBAAmB;EAE5C,IAAMC,kCAAkC,GAAG,SAArCA,kCAAkC,GAAS;IAC/CJ,UAAU,CAACK,QAAQ,CAAC,YAAY,CAAC;EACnC,CAAC;EAED,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuB,GAAS;IACpCH,mBAAmB,CAAC,CAACD,gBAAgB,CAAC;EACxC,CAAC;EAED,OACE,MAAC,YAAY;IAAC,KAAK,EAAEL,MAAM,CAACU,IAAK;IAAA,WAC/B,MAAC,UAAU;MACT,qBAAqB,EAAEV,MAAM,CAACW,+BAAgC;MAAA,WAC9D,MAAC,SAAS;QAAA,WACR,KAAC,YAAY,KAAG,EAChB,KAAC,OAAO,KAAG,EACX,KAAC,iBAAiB,KAAG;MAAA,EACX,EACXN,gBAAgB,GAAG,KAAC,eAAe,KAAG,GAAG,KAAC,YAAY,KAAG;IAAA,EAC/C,EACb,MAAC,SAAS;MAAC,KAAK,EAAEL,MAAM,CAACY,qBAAsB;MAAA,WAC7C,KAAC,MAAM;QAAC,WAAW;QAAC,OAAO,EAAEH,uBAAwB;QAAA,UACnD,KAAC,IAAI;UAAC,OAAO;UAAC,MAAM;UAAC,KAAK,EAAET,MAAM,CAACa,WAAY;UAAA,UAC5C,CAACR,gBAAgB,GAAG,UAAU,GAAG;QAAmB;MAChD,EACA,EACT,KAAC,MAAM;QACL,WAAW;QACX,aAAa;QACb,OAAO,EAAEE,kCAAmC;QAC5C,KAAK,EAAEP,MAAM,CAACc,iBAAkB;QAAA,UAChC,KAAC,IAAI;UAAA;QAAA;MAAyB,EACvB;IAAA,EACC;EAAA,EACC;AAEnB,CAAC;AAED,eAAeZ,UAAU"},"metadata":{},"sourceType":"module"}